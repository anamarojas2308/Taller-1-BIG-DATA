---
title: "Primer Taller big data"
author: "Juan David Rincón - Ana María Rojas"
date: "2025-02-24"
output: html_document
---
  
  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Configuración Inicial
```{r setup, include=FALSE}
rm(list = ls())
gc()
closeAllConnections()

# Cargar librerías necesarias
load.lib <- c('data.table', 'dplyr', 'ggplot2', 'stargazer', 'tidyverse', 'lubridate', 'plotly', 'rvest', 'tm', 'wordcloud', 'caret', 'boot', 'pacman', 'skimr')

library(skimr)

install.lib <- load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib) install.packages(lib)
sapply(load.lib, require, character = TRUE)

print("Librerías cargadas correctamente")
```

# Web Scraping de GEIH
```{r scraping, include=FALSE}
  url_base <- "https://ignaciomsarmiento.github.io/GEIH2018_sample/pages/geih_page_"
  pagina <- read_html(paste0(url_base, "1.html"))
  datos_totales <- pagina %>% html_table(fill = TRUE) %>% .[[1]]
  
  for (i in 2:10) {
    url <- paste0(url_base, i, ".html")
    tryCatch({
      pagina <- read_html(url)
      tabla <- pagina %>% html_table(fill = TRUE) %>% .[[1]]
      datos_totales <- bind_rows(datos_totales, tabla)
    }, error = function(e) {
      message(paste("Error al cargar la página", i, ":", e))
    })
  }
  
  head(datos_totales)
```

# Renombrar Columnas y Limpiar Datos
```{r limpieza, include=FALSE}
datos_totales <- datos_totales %>%
  rename(ingreso_total = ingtot,
    edad = age,
    hombre = sex,
    T_horas_trabajadas = totalHoursWorked,
    Salario_hora = y_salary_m_hu
  ) %>%
  mutate(
    ln_Salario_hora = log(Salario_hora)
  )

# Filtrar registros inválidos 

datos_filtrados <- datos_totales %>%
  filter(edad > 18, ingreso_total > 0, T_horas_trabajadas > 0, Salario_hora > 0)

# Identificar y eliminar outliers usando percentiles 1% y 99%
low_hours <- quantile(datos_filtrados$T_horas_trabajadas, 0.01)
up_hours <- quantile(datos_filtrados$T_horas_trabajadas, 0.99)
low_salary <- quantile(datos_filtrados$Salario_hora, 0.01)
up_salary <- quantile(datos_filtrados$Salario_hora, 0.99)

datos_filtrados <- datos_filtrados %>%
  filter(T_horas_trabajadas >= low_hours & T_horas_trabajadas <= up_hours,
         Salario_hora >= low_salary & Salario_hora <= up_salary)

```

```{r dividir_datos, include=FALSE}
# Seleccionar unicamente la variable de Salario Hora, no ingresos
numericas <- datos_filtrados %>% select(-all_of(c("y_ingLab_m_ha", "y_total_m_ha", "p6500", "y_salary_m", "impa", "y_ingLab_m", "y_total_m", "ingtotob", "ingreso_total")))

# Seleccionar las columnas numéricas del dataframe
numericas <- numericas[, sapply(numericas, is.numeric)]

# Filtrar las columnas con desviación estándar diferente a cero y sin valores NA
numericas_filtradas <- numericas[, sapply(numericas, function(x) {
  !all(is.na(x)) && sd(x, na.rm = TRUE) != 0
})]

# Ver el resumen de las columnas filtradas
summary(numericas_filtradas)

# Calcular la correlación de cada variable con 'ingreso_total'
correlaciones_con_y <- sapply(numericas_filtradas, function(x) cor(x, numericas$Salario_hora, use = "complete.obs"))

# Crear el dataframe con las correlaciones
resultados_correlacion <- data.frame(Variable = names(correlaciones_con_y), Correlacion_con_y = correlaciones_con_y)

# Mostrar los resultados
print(resultados_correlacion)

# Compute the absolute value of the correlations with 'Salario_hora'
correlaciones_abs <- abs(correlaciones_con_y)

# Sort the correlations in descending order
correlaciones_abs_sorted <- sort(correlaciones_abs, decreasing = TRUE)
print(correlaciones_abs_sorted)

# Select the names of the top 25 variables with the highest correlation
top_25_vars <- names(correlaciones_abs_sorted)[1:25]

# Create a new dataframe with the top 25 variables and their corresponding correlations
top_25_correlaciones <- data.frame(Variable = top_25_vars,
                                   Correlacion_con_y = correlaciones_abs_sorted[1:25])

# Print the results
print(top_25_correlaciones)

```

```{r dividir_datos, include=FALSE}
# Seleccionar variables importantes para el modelo 

variables_seleccionadas <- c("edad", "clase", "hombre", "college", "depto", "maxEducLevel", "ocu", "dsi", "informal", "formal", "cuentaPropia", "microEmpresa", "Salario_hora", "ingtotes", "impa", "isa", "p6500", "p6510", "p6580", "p6750", "p7070", "cotPension", "p6920", "hoursWorkUsual", "hoursWorkActualSecondJob", "fex_c", "fweight", "oficio", "estrato1")

base_seleccionada <- datos_filtrados %>% select(all_of(variables_seleccionadas))

```
```{r dividir_datos, include=FALSE}
skim(base_seleccionada) 

miss_values <- skim(base_seleccionada) %>% select( skim_variable, n_missing)
Nobs <- nrow(base_seleccionada) 
# percentage of missing
miss_values <- miss_values %>% mutate(p_missing= n_missing/Nobs)
miss_values <- miss_values %>% arrange(-n_missing)

ggplot(miss_values, aes(x = reorder(skim_variable, +p_missing) , y =  p_missing)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +
  coord_flip() +
  labs(title = "N Missing Per Variable", x = "Var Name", y = "Missings")+ 
  theme(axis.text = element_text(size = 5)) 

# Borrar aquellas variables con más del 90% de missing values ya que imputarlas puede traer más ruido que otra cosa
var_miss <- miss_values %>% filter (p_missing > 0.9)
base_seleccionada <- base_seleccionada %>% select(-all_of(var_miss[[1]]))
```

```{r dividir_datos, include=FALSE}
# Loop through each column and display descriptive statistics
for (col_name in colnames(base_seleccionada)) {
  cat("Descriptive statistics for", col_name, ":\n")
  print(summary(base_seleccionada[[col_name]]))
  skim(base_seleccionada[[col_name]])
  cat("\n")
}

```

```{r dividir_datos, include=FALSE}
# Usar cut para crear los grupos de edad
base_seleccionada$grupo_edad <- cut(base_seleccionada$edad, 
                                    breaks = c(-Inf, 20, 30, 40, 50, 60, 70, Inf), 
                                    labels = c("<20", "20-30", "30-40", "40-50", "50-60", "60-70", ">70"),
                                    right = FALSE)

base_seleccionada$hombre <- as.factor(base_seleccionada$hombre)

# Calcular el promedio de ingresos por grupo de edad y género
promedio_ingresos <- base_seleccionada %>%
  group_by(grupo_edad, hombre, maxEducLevel, oficio, estrato1) %>%
  summarise(promedio = mean(Salario_hora, na.rm = TRUE))

ggplot(promedio_ingresos, aes(x = grupo_edad, y = promedio, fill = hombre)) +
  geom_bar(stat = "identity", position = "dodge") +  # position = "dodge" coloca las barras al lado
  labs(x = "Grupo de Edad", y = "Promedio de Ingresos", fill = "Hombre") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(promedio_ingresos, aes(x = estrato1, y = promedio)) +
  geom_bar(stat = "identity", position = "dodge") +  # position = "dodge" coloca las barras al lado
  labs(x = "Estrato", y = "Promedio de Ingresos") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(promedio_ingresos, aes(x = maxEducLevel, y = promedio, fill = hombre)) +
  geom_bar(stat = "identity", position = "dodge") +  # position = "dodge" coloca las barras al lado
  labs(x = "Nivel de Educación", y = "Promedio de Ingresos", fill = "Hombre") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(promedio_ingresos, aes(x = oficio, y = promedio, fill = hombre)) +
  geom_bar(stat = "identity", position = "dodge") +  # position = "dodge" coloca las barras al lado
  labs(x = "Oficio", y = "Promedio de Ingresos", fill = "Hombre") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


## Dispersión Horas Trabajadas
ggplot(data = base_seleccionada , 
       mapping = aes(x = hoursWorkUsual , y = Salario_hora , group=as.factor(formal) , color=as.factor(formal))) +
       geom_point()

## Dispersión Oficio
ggplot(data = base_seleccionada , 
       mapping = aes(x = oficio , y = Salario_hora , group=as.factor(formal) , color=as.factor(formal))) +
       geom_point()

## Dispersión Estrato
ggplot(data = base_seleccionada , 
       mapping = aes(x = estrato1 , y = Salario_hora , group=as.factor(formal) , color=as.factor(formal))) +
       geom_point()

box_plot <- ggplot(data=promedio_ingresos , mapping = aes(as.factor(estrato1) , promedio)) + 
            geom_boxplot() 
box_plot

````

```{r dividir_datos, include=FALSE}
# Step 1: Fit the regression model
# Assuming 'edad' is the age variable and 'ingreso_total' is the wage variable
# First, create a new variable for Age^2
base_seleccionada$edad2 <- base_seleccionada$edad^2

# Fit the model: log(wage) = β1 + β2 * Age + β3 * Age^2
model <- lm( ~ edad + edad2, data = base_seleccionada)

# Step 2: Regression table
summary(model)

# Step 3: Interpretation of the coefficients
# Print the coefficients and their significance
coef_table <- summary(model)$coefficients
print(coef_table)

# Interpretation:
# - β1: Intercept. Represents the baseline value of log(wage) when Age is 0.
# - β2: Age coefficient. Represents the change in log(wage) for each additional year of age.
# - β3: Age^2 coefficient. Captures the non-linear effect of age on wages, accounting for the curvilinear relationship.

# Step 4: In-sample fit of the model (R-squared, Residuals)
cat("R-squared:", summary(model)$r.squared, "\n")
cat("Residual standard error:", summary(model)$sigma, "\n")

# Step 5: Plot the estimated age-earnings profile
# Create a sequence of ages for plotting (from min to max age in the data)
age_seq <- seq(min(base_seleccionada$edad), max(base_seleccionada$edad), by = 1)

# Predict the log(wage) for these ages
predicted_log_wage <- predict(model, newdata = data.frame(edad = age_seq, edad2 = age_seq^2))

# Plot the Age-Wage profile
plot(age_seq, exp(predicted_log_wage), type = "l", col = "blue", lwd = 2,
     xlab = "Age", ylab = "Wage", main = "Estimated Age-Wage Profile")
grid()

# Step 6: Bootstrap for confidence intervals of the coefficients and peak age
set.seed(123) # For reproducibility

# Define a function to estimate the peak age
bootstrap_peak_age <- function(model, data) {
  # Resample the data
  bootstrap_sample <- data[sample(1:nrow(data), replace = TRUE), ]
  
  # Fit the model on the bootstrap sample
  bootstrap_model <- lm(log(ingreso_total) ~ edad + edad2, data = bootstrap_sample)
  
  # Calculate the coefficients
  coef_bootstrap <- coef(bootstrap_model)
  
  # Find the peak age (the age where the wage is maximized, i.e., where the derivative is zero)
  peak_age <- -coef_bootstrap[2] / (2 * coef_bootstrap[3])
  
  return(peak_age)
}

# Run the bootstrap procedure (1000 iterations for example)
bootstrap_results <- replicate(1000, bootstrap_peak_age(model, base_seleccionada))

# Calculate the 95% confidence interval for the peak age
ci_peak_age <- quantile(bootstrap_results, c(0.025, 0.975))
cat("95% Confidence Interval for Peak Age: [", ci_peak_age[1], ",", ci_peak_age[2], "]\n")

# Plot the confidence interval for the peak age
abline(v = ci_peak_age, col = "red", lty = 2)
```
